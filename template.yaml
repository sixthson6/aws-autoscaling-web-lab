AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Auto Scaling Lab: VPC (2 public, 2 private), ALB in public subnets, ASG in private subnets, Apache instances that display "Hello from [IP] / [Instance ID]" and a button that triggers CPU stress.
Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.0.0/24
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.1.0/24
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.10.0/24
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.11.0/24
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3.small
      - t3.medium
  AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Mappings: {}

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: asg-lab-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: asg-lab-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: private-subnet-2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: public-rt

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: nat-gateway-1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: private-rt

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from anywhere to ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: alb-sg

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from ALB only
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref AlbSecurityGroup
      Tags:
        - Key: Name
          Value: instances-sg

  # Load Balancer, Target Group, Listener
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: asg-lab-alb
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Type: application
      Tags:
        - Key: Name
          Value: asg-lab-alb

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: asg-lab-tg
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: '80'
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  # IAM Instance Profile (optional; here minimal)
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: asg-lab-instance-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  # Launch Template for ASG
  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: asg-lab-launch-template
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData: !Base64
          Fn::Sub: |
            #!/bin/bash -xe
            yum update -y
            yum install -y httpd

            # create cgi-bin for CPU stress endpoints
            mkdir -p /var/www/cgi-bin

            # start stress script
            cat > /var/www/cgi-bin/stress.sh << 'EOF'
            #!/bin/bash
            # Start two background CPU burners using yes
            nohup bash -c 'yes > /dev/null &' >/dev/null 2>&1
            nohup bash -c 'yes > /dev/null &' >/dev/null 2>&1
            echo -e "Content-type: text/html\n\n<html><body><h2>CPU stress started on this instance</h2></body></html>"
            EOF
            chmod +x /var/www/cgi-bin/stress.sh

            # stop stress script
            cat > /var/www/cgi-bin/stop-stress.sh << 'EOF'
            #!/bin/bash
            # Kill all yes processes
            sudo pkill -f "^yes"
            echo -e "Content-type: text/html\n\n<html><body><h2>CPU stress stopped on this instance</h2></body></html>"
            EOF
            chmod +x /var/www/cgi-bin/stop-stress.sh

            # build index page
            TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" -s)
            META_IP=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/local-ipv4)
            META_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/instance-id)

            cat > /var/www/html/index.html << EOF
            <!doctype html>
            <html>
            <head>
              <title>ASG Lab</title>
              <style>
                body {
                  font-family: Arial, sans-serif;
                  background: #f4f6f9;
                  margin: 0;
                  padding: 40px;
                  text-align: center;
                  color: #333;
                }
                h1 {
                  font-size: 28px;
                  margin-bottom: 20px;
                }
                button {
                  background-color: #3498db;
                  color: white;
                  border: none;
                  padding: 12px 24px;
                  margin: 10px;
                  border-radius: 6px;
                  font-size: 16px;
                  cursor: pointer;
                  transition: background 0.3s;
                }
                button:hover {
                  background-color: #2980b9;
                }
                #stressBtn {
                  background-color: #e74c3c;
                }
                #stressBtn:hover {
                  background-color: #c0392b;
                }
                #stopBtn {
                  background-color: #27ae60;
                }
                #stopBtn:hover {
                  background-color: #1e8449;
                }
                #result {
                  margin-top: 30px;
                  padding: 15px;
                  border: 1px solid #ddd;
                  background: #fff;
                  border-radius: 6px;
                  display: inline-block;
                  min-width: 300px;
                }
              </style>
            </head>
            <body>
              <h1>Hello from $META_IP / $META_ID</h1>
              <button id="stressBtn">🚀 Start CPU Stress</button>
              <button id="stopBtn">🛑 Stop CPU Stress</button>
              <div id="result"></div>
              <script>
                document.getElementById('stressBtn').addEventListener('click', function() {
                  fetch('/cgi-bin/stress.sh')
                    .then(r => r.text())
                    .then(t => { document.getElementById('result').innerHTML = '<pre>' + t + '</pre>'; })
                    .catch(e => { document.getElementById('result').innerText = 'Error: ' + e; });
                });
                document.getElementById('stopBtn').addEventListener('click', function() {
                  fetch('/cgi-bin/stop-stress.sh')
                    .then(r => r.text())
                    .then(t => { document.getElementById('result').innerHTML = '<pre>' + t + '</pre>'; })
                    .catch(e => { document.getElementById('result').innerText = 'Error: ' + e; });
                });
              </script>
            </body>
            </html>
            EOF

            # enable CGI handling in httpd
            chown -R apache:apache /var/www/html /var/www/cgi-bin

            cat > /etc/httpd/conf.d/cgi.conf << 'EOF'
            ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"
            <Directory "/var/www/cgi-bin">
                AllowOverride None
                Options +ExecCGI
                Require all granted
            </Directory>
            EOF

            systemctl enable httpd
            systemctl start httpd


  # Auto Scaling Group
  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: asg-lab
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '4'
      DesiredCapacity: '1'
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Name
          Value: asg-lab-instance
          PropagateAtLaunch: true

  # Scaling policy with target tracking
  CpuTargetTrackingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref MyAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 30
        DisableScaleIn: false

Outputs:
  LoadBalancerDNS:
    Description: Public URL of the Application Load Balancer
    Value: !GetAtt ALB.DNSName
    Export:
      Name: asg-lab-alb-dns
  AutoScalingGroupName:
    Description: ASG Name
    Value: !Ref MyAutoScalingGroup